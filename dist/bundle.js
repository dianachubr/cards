/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/***/ (() => {

eval("let notFlippedCardI;\r\nlet flippedCardI;\r\nlet time;\r\nlet minute = 0;\r\nlet second = 0;\r\n\r\n//const createGameCard = (defaultIcon, flippedCardIcon) => {\r\nconst createGameCard = (defaultIcon) => {\r\n  const card = document.createElement(\"div\");\r\n  card.classList.add(\"game-card\");\r\n  card.id = defaultIcon;\r\n\r\n  notFlippedCardI = document.createElement(\"img\");\r\n  notFlippedCardI.src = \"./js/src/img/\" + defaultIcon + \".png\";\r\n\r\n  flippedCardI = document.createElement(\"img\");\r\n  flippedCardI.src = \"./js/src/img/flippedCardIcon.png\";\r\n\r\n  //card.append(notFlippedCardI);\r\n  card.append(flippedCardI, notFlippedCardI);\r\n\r\n  setTimeout(() => {\r\n    displayNone();\r\n  }, 5000);\r\n  return card;\r\n};\r\n\r\nfunction startTimer() {\r\n  second++;\r\n  if (second >= 60) {\r\n    second = 0;\r\n    minute++;\r\n  }\r\n}\r\n\r\nfunction timer() {\r\n  time = setTimeout(handler, 1000);\r\n}\r\n\r\nfunction handler() {\r\n  startTimer();\r\n  document.querySelector(\".time\").textContent =\r\n    (minute < 10 ? \"0\" + minute : minute) +\r\n    \":\" +\r\n    (second < 10 ? \"0\" + second : second);\r\n  timer();\r\n}\r\n\r\nfunction stopTimer() {\r\n  clearInterval(handler);\r\n  document.querySelector(\".time\").textContent =\r\n    (minute < 10 ? \"0\" + minute : minute) +\r\n    \":\" +\r\n    (second < 10 ? \"0\" + second : second);\r\n}\r\n//function timeOut() {\r\n//setTimeout(() => {\r\n// displayNone();\r\n//}, 5000);\r\n//}\r\n\r\n//function displayNone() {\r\n// const shownImg = document.getElementsByTagName(\"img\");\r\n// shownImg.forEach((notFlippedCardI) =>\r\n//notFlippedCardI.src = \"./js/src/img/flippedCardIcon.png\"\r\n//)\r\n//notFlippedCardI.src = \"./js/src/img/flippedCardIcon.png\";\r\n//}\r\n\r\nfunction displayNone() {\r\n  //cards.forEach((notFlippedCardI) =>\r\n  notFlippedCardI.src = \"./js/src/img/flippedCardIcon.png\";\r\n  //)}\r\n}\r\n\r\nconst createGameMenu = () => {\r\n  const gameSection = document.querySelector(\".game-section__container\");\r\n  gameSection.innerHTML = \"\";\r\n  gameSection.classList.add(\"container\");\r\n\r\n  const title = document.createElement(\"h2\");\r\n  title.textContent = \"Выбери сложность\";\r\n  title.classList.add(\"game-menu__title\");\r\n\r\n  const blockButtons = document.createElement(\"div\");\r\n  blockButtons.classList.add(\"blockButtons\");\r\n\r\n  const restartBtn = document.createElement(\"button\");\r\n  restartBtn.classList.add(\"restart-btn\");\r\n  restartBtn.textContent = \"Старт\";\r\n\r\n  const createDifficultButton = (difficult) => {\r\n    const button = document.createElement(\"button\");\r\n    button.classList.add(\"game-menu__difficult-btn\");\r\n    button.textContent = difficult;\r\n\r\n    button.onclick = function () {\r\n      restartBtn.addEventListener(\"click\", () => startGame(difficult));\r\n    };\r\n\r\n    return button;\r\n  };\r\n\r\n  blockButtons.append(\r\n    createDifficultButton(1),\r\n    createDifficultButton(2),\r\n    createDifficultButton(3)\r\n  );\r\n\r\n  gameSection.append(title, blockButtons, restartBtn);\r\n};\r\n\r\nconst cardsApp = () => {\r\n  createGameMenu();\r\n};\r\n\r\ncardsApp();\r\n\r\nconst startGame = (difficult) => {\r\n  let firstCard = null;\r\n  let secondCard = null;\r\n  let clickable = true;\r\n\r\n  const gameSection = document.querySelector(\".game-section__container\");\r\n  gameSection.classList.remove(\"container\");\r\n  gameSection.innerHTML = \"\";\r\n\r\n  const buttonAndTime = document.createElement(\"div\");\r\n  buttonAndTime.classList.add(\"buttonAndTime\");\r\n\r\n  time = document.createElement(\"div\");\r\n  time.classList.add(\"time\");\r\n  time.textContent = \"00:00\";\r\n\r\n  const gameTable = document.createElement(\"div\");\r\n  gameTable.classList.add(\"game-table\");\r\n\r\n  const cardsIcons = createIconsArray(difficult);\r\n  const duplicatedCardsIcons = duplicateArray(cardsIcons);\r\n\r\n  const restartBtn = document.createElement(\"button\");\r\n  restartBtn.classList.add(\"restart-btn\");\r\n  restartBtn.textContent = \"Начать заново\";\r\n\r\n  buttonAndTime.append(time, restartBtn);\r\n\r\n  shuffle(duplicatedCardsIcons);\r\n\r\n  duplicatedCardsIcons.forEach((images) =>\r\n    gameTable.append(createGameCard(images))\r\n  );\r\n\r\n  gameSection.append(buttonAndTime, gameTable);\r\n\r\n  const cards = document.querySelectorAll(\".game-card\");\r\n\r\n  //timeOut();\r\n  handler();\r\n\r\n  restartBtn.addEventListener(\"click\", createGameMenu);\r\n\r\n  cards.forEach((card, index) =>\r\n    card.addEventListener(\"click\", () => {\r\n      if (clickable == true && !card.classList.contains(\"successfully\")) {\r\n        card.classList.add(\"flip\");\r\n\r\n        if (firstCard == null) {\r\n          firstCard = index;\r\n          console.log(firstCard);\r\n        } else {\r\n          if (index != firstCard) {\r\n            secondCard = index;\r\n            clickable = false;\r\n          }\r\n        }\r\n\r\n        if (\r\n          firstCard != null &&\r\n          secondCard != null &&\r\n          firstCard != secondCard\r\n        ) {\r\n          if (cards[firstCard].id === cards[secondCard].id) {\r\n            console.log(cards[firstCard]);\r\n            console.log(card.id);\r\n\r\n            setTimeout(() => {\r\n              cards[firstCard].classList.add(\"successfully\");\r\n              cards[secondCard].classList.add(\"successfully\");\r\n\r\n              firstCard = null;\r\n              secondCard = null;\r\n              clickable = true;\r\n            }, 500);\r\n          } else {\r\n            setTimeout(() => {\r\n              cards[firstCard].classList.remove(\"flip\");\r\n              cards[secondCard].classList.remove(\"flip\");\r\n\r\n              firstCard = null;\r\n              secondCard = null;\r\n              clickable = true;\r\n            }, 500);\r\n          }\r\n        }\r\n        if (\r\n          Array.from(cards).every((card) => card.className.includes(\"flip\"))\r\n        ) {\r\n          win();\r\n          stopTimer();\r\n        }\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst shuffle = (array) => {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  while (currentIndex != 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst duplicateArray = (array) =>\r\n  array.reduce((res, current) => res.concat([current, current]), []);\r\n\r\nconst createIconsArray = (initialCount) => {\r\n  const cardsIcons = [\r\n    \"6bubni\",\r\n    \"7bubni\",\r\n    \"8bubni\",\r\n    \"9bubni\",\r\n    \"10bubni\",\r\n    \"valetbubni\",\r\n    \"damabubni\",\r\n    \"korolbubni\",\r\n    \"tuzbubni\",\r\n    \"6chervi\",\r\n    \"7chervi\",\r\n    \"8chervi\",\r\n    \"9chervi\",\r\n    \"10chervi\",\r\n    \"valetchervi\",\r\n    \"damachervi\",\r\n    \"korolchervi\",\r\n    \"tuzchervi\",\r\n    \"6piki\",\r\n    \"7piki\",\r\n    \"8piki\",\r\n    \"9piki\",\r\n    \"10piki\",\r\n    \"valetpiki\",\r\n    \"damapiki\",\r\n    \"korolpiki\",\r\n    \"tuzpiki\",\r\n    \"6kresti\",\r\n    \"7kresti\",\r\n    \"8kresti\",\r\n    \"9kresti\",\r\n    \"10kresti\",\r\n    \"valetkresti\",\r\n    \"damakresti\",\r\n    \"korolkresti\",\r\n    \"tuzkresti\",\r\n  ];\r\n\r\n  switch (initialCount) {\r\n    case 1:\r\n      return cardsIcons.slice(0, 3);\r\n    case 2:\r\n      return cardsIcons.slice(0, 6);\r\n    case 3:\r\n      return cardsIcons.slice(0, 9);\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nfunction win() {\r\n  const gameSection = document.querySelector(\".game-section__container\");\r\n  gameSection.innerHTML = \"\";\r\n  gameSection.classList.add(\"container\");\r\n\r\n  const winImg = document.createElement(\"img\");\r\n  winImg.src = \"./js/src/img/win.png\";\r\n\r\n  const textWin = document.createElement(\"h1\");\r\n  textWin.textContent = \"Вы выиграли!\";\r\n  textWin.classList.add(\"textWin\");\r\n\r\n  const textTime = document.createElement(\"h2\");\r\n  textTime.textContent = \"Затраченное время:\";\r\n  textTime.classList.add(\"textTime\");\r\n\r\n  const elapsedTime = document.createElement(\"div\");\r\n  elapsedTime.classList.add(\"time\");\r\n  elapsedTime.textContent = time;\r\n\r\n  const restartBtn = document.createElement(\"button\");\r\n  restartBtn.classList.add(\"restart-btn\");\r\n  restartBtn.textContent = \"Играть снова\";\r\n\r\n  gameSection.append(winImg, textWin, textTime, elapsedTime, restartBtn);\r\n\r\n  restartBtn.addEventListener(\"click\", createGameMenu);\r\n}\r\n\n\n//# sourceURL=webpack://cardgames/./js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/index.js"]();
/******/ 	
/******/ })()
;